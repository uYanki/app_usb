<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Object\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Object\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Jan 13 20:30:49 2025
<BR><P>
<H3>Maximum Stack Usage =       2488 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
f_parser &rArr; luaY_parser &rArr; statement &rArr;  statement (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[e1]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e1]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[107]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">reallymarkobject</a><BR>
 <LI><a href="#[14e]">luaD_throw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14e]">luaD_throw</a><BR>
 <LI><a href="#[1d7]">luaD_seterrorobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">luaS_newlstr</a><BR>
 <LI><a href="#[1c9]">luaD_reallocstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14e]">luaD_throw</a><BR>
 <LI><a href="#[165]">luaS_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d5]">luaM_realloc_</a><BR>
 <LI><a href="#[1d8]">luaD_shrinkstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c9]">luaD_reallocstack</a><BR>
 <LI><a href="#[172]">singlestep</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4]">GCTM</a><BR>
 <LI><a href="#[163]">finishgencycle</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b4]">GCTM</a><BR>
 <LI><a href="#[220]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">luaS_newlstr</a><BR>
 <LI><a href="#[22a]">luaO_tostring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">luaS_newlstr</a><BR>
 <LI><a href="#[11f]">luaO_pushfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ee]">luaO_pushvfstring</a><BR>
 <LI><a href="#[175]">getobjname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[175]">getobjname</a><BR>
 <LI><a href="#[10e]">luaS_new</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">luaS_newlstr</a><BR>
 <LI><a href="#[1e6]">typeerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[230]">luaT_callTMres</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">luaD_callnoyield</a><BR>
 <LI><a href="#[1c3]">luaD_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c5]">luaV_execute</a><BR>
 <LI><a href="#[1c6]">luaE_checkcstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[1d0]">luaD_tryfuncTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[12a]">luaF_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">luaD_callnoyield</a><BR>
 <LI><a href="#[1cb]">luaD_hook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[1c4]">luaD_precall</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[151]">luaH_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f1]">luaH_newkey</a><BR>
 <LI><a href="#[1f1]">luaH_newkey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f1]">luaH_newkey</a><BR>
 <LI><a href="#[111]">luaV_finishset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[22f]">luaT_callTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">luaD_callnoyield</a><BR>
 <LI><a href="#[239]">luaV_finishget</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[1c5]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[220]">luaV_concat</a><BR>
 <LI><a href="#[1e2]">luaF_newtbcupval</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[235]">luaT_trybinTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">luaD_callnoyield</a><BR>
 <LI><a href="#[1ef]">luaG_tointerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[1d2]">luaD_pretailcall</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[1ea]">luaG_forerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[1c8]">luaD_growstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[231]">luaT_callorderTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">luaD_callnoyield</a><BR>
 <LI><a href="#[1ed]">luaG_ordererror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ca]">luaG_runerror</a><BR>
 <LI><a href="#[1ee]">luaO_pushvfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18d]">luaS_newlstr</a><BR>
 <LI><a href="#[15a]">findfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15a]">findfield</a><BR>
 <LI><a href="#[181]">lexerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[181]">lexerror</a><BR>
 <LI><a href="#[24c]">suffixedexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">subexpr</a><BR>
 <LI><a href="#[24e]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24e]">singlevaraux</a><BR>
 <LI><a href="#[173]">funcargs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">subexpr</a><BR>
 <LI><a href="#[13d]">constructor</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">subexpr</a><BR>
 <LI><a href="#[141]">recfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">subexpr</a><BR>
 <LI><a href="#[142]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">subexpr</a><BR>
 <LI><a href="#[112]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[117]">statement</a><BR>
 <LI><a href="#[250]">test_then_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[117]">statement</a><BR>
 <LI><a href="#[117]">statement</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[117]">statement</a><BR>
 <LI><a href="#[24b]">restassign</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24b]">restassign</a><BR>
 <LI><a href="#[168]">forbody</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[117]">statement</a><BR>
 <LI><a href="#[197]">loadFunction</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[197]">loadFunction</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from cmb_fault_keil.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from stm32f4xx_it.o(.text.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f4xx_it.o(.text.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[5f]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[5e]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[76]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[77]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[69]">closepaux</a> from ldo.o(.text.closepaux) referenced 4 times from ldo.o(.text.luaD_closeprotected)
 <LI><a href="#[69]">closepaux</a> from ldo.o(.text.closepaux) referenced 4 times from ldo.o(.text.luaD_pcall)
 <LI><a href="#[63]">dofilecont</a> from lbaselib.o(.text.dofilecont) referenced 2 times from lbaselib.o(.text.luaB_dofile)
 <LI><a href="#[61]">dothecall</a> from lgc.o(.text.dothecall) referenced 2 times from lgc.o(.text.GCTM)
 <LI><a href="#[72]">f_call</a> from lapi.o(.text.f_call) referenced 2 times from lapi.o(.text.lua_pcallk)
 <LI><a href="#[71]">f_luaopen</a> from lstate.o(.text.f_luaopen) referenced 2 times from lstate.o(.text.lua_newstate)
 <LI><a href="#[6a]">f_parser</a> from ldo.o(.text.f_parser) referenced 2 times from ldo.o(.text.luaD_protectedparser)
 <LI><a href="#[68]">finishpcall</a> from lbaselib.o(.text.finishpcall) referenced 2 times from lbaselib.o(.text.luaB_pcall)
 <LI><a href="#[68]">finishpcall</a> from lbaselib.o(.text.finishpcall) referenced 2 times from lbaselib.o(.text.luaB_xpcall)
 <LI><a href="#[75]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[75]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[65]">generic_reader</a> from lbaselib.o(.text.generic_reader) referenced 2 times from lbaselib.o(.text.luaB_load)
 <LI><a href="#[6c]">getF</a> from lauxlib.o(.text.getF) referenced 2 times from lauxlib.o(.text.luaL_loadfilex)
 <LI><a href="#[6b]">getS</a> from lauxlib.o(.text.getS) referenced 2 times from lauxlib.o(.text.luaL_loadbufferx)
 <LI><a href="#[6b]">getS</a> from lauxlib.o(.text.getS) referenced 2 times from lauxlib.o(.text.luaL_loadstring)
 <LI><a href="#[64]">ipairsaux</a> from lbaselib.o(.text.ipairsaux) referenced 2 times from lbaselib.o(.text.luaB_ipairs)
 <LI><a href="#[60]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[6d]">l_alloc</a> from lauxlib.o(.text.l_alloc) referenced 2 times from lauxlib.o(.text.luaL_newstate)
 <LI><a href="#[78]">luaB_assert</a> from lbaselib.o(.text.luaB_assert) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[79]">luaB_collectgarbage</a> from lbaselib.o(.text.luaB_collectgarbage) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[7a]">luaB_dofile</a> from lbaselib.o(.text.luaB_dofile) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[7b]">luaB_error</a> from lbaselib.o(.text.luaB_error) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[7c]">luaB_getmetatable</a> from lbaselib.o(.text.luaB_getmetatable) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[7d]">luaB_ipairs</a> from lbaselib.o(.text.luaB_ipairs) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[7f]">luaB_load</a> from lbaselib.o(.text.luaB_load) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[7e]">luaB_loadfile</a> from lbaselib.o(.text.luaB_loadfile) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[67]">luaB_next</a> from lbaselib.o(.text.luaB_next) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[67]">luaB_next</a> from lbaselib.o(.text.luaB_next) referenced 2 times from lbaselib.o(.text.luaB_pairs)
 <LI><a href="#[80]">luaB_pairs</a> from lbaselib.o(.text.luaB_pairs) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[81]">luaB_pcall</a> from lbaselib.o(.text.luaB_pcall) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[82]">luaB_print</a> from lbaselib.o(.text.luaB_print) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[84]">luaB_rawequal</a> from lbaselib.o(.text.luaB_rawequal) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[86]">luaB_rawget</a> from lbaselib.o(.text.luaB_rawget) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[85]">luaB_rawlen</a> from lbaselib.o(.text.luaB_rawlen) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[87]">luaB_rawset</a> from lbaselib.o(.text.luaB_rawset) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[88]">luaB_select</a> from lbaselib.o(.text.luaB_select) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[89]">luaB_setmetatable</a> from lbaselib.o(.text.luaB_setmetatable) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[8a]">luaB_tonumber</a> from lbaselib.o(.text.luaB_tonumber) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[8b]">luaB_tostring</a> from lbaselib.o(.text.luaB_tostring) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[8c]">luaB_type</a> from lbaselib.o(.text.luaB_type) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[83]">luaB_warn</a> from lbaselib.o(.text.luaB_warn) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[8d]">luaB_xpcall</a> from lbaselib.o(.text.luaB_xpcall) referenced from lbaselib.o(.rodata.base_funcs)
 <LI><a href="#[8e]">lua_delay</a> from lua_demo.o(.text.lua_delay) referenced from lua_demo.o(.data.mylib)
 <LI><a href="#[90]">lua_led_off</a> from lua_demo.o(.text.lua_led_off) referenced from lua_demo.o(.data.mylib)
 <LI><a href="#[8f]">lua_led_on</a> from lua_demo.o(.text.lua_led_on) referenced from lua_demo.o(.data.mylib)
 <LI><a href="#[70]">lua_newstate</a> from lstate.o(.text.lua_newstate) referenced 2 times from lstate.o(.text.lua_newstate)
 <LI><a href="#[5b]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[66]">pairscont</a> from lbaselib.o(.text.pairscont) referenced 2 times from lbaselib.o(.text.luaB_pairs)
 <LI><a href="#[6e]">panic</a> from lauxlib.o(.text.panic) referenced 2 times from lauxlib.o(.text.luaL_newstate)
 <LI><a href="#[73]">warnfcont</a> from lauxlib.o(.text.warnfcont) referenced 2 times from lauxlib.o(.text.warnfcont)
 <LI><a href="#[73]">warnfcont</a> from lauxlib.o(.text.warnfcont) referenced 2 times from lauxlib.o(.text.warnfon)
 <LI><a href="#[6f]">warnfoff</a> from lauxlib.o(.text.warnfoff) referenced 2 times from lauxlib.o(.text.luaL_newstate)
 <LI><a href="#[6f]">warnfoff</a> from lauxlib.o(.text.warnfoff) referenced 2 times from lauxlib.o(.text.warnfoff)
 <LI><a href="#[6f]">warnfoff</a> from lauxlib.o(.text.warnfoff) referenced 2 times from lauxlib.o(.text.warnfon)
 <LI><a href="#[74]">warnfon</a> from lauxlib.o(.text.warnfon) referenced 2 times from lauxlib.o(.text.warnfcont)
 <LI><a href="#[74]">warnfon</a> from lauxlib.o(.text.warnfon) referenced 2 times from lauxlib.o(.text.warnfoff)
 <LI><a href="#[74]">warnfon</a> from lauxlib.o(.text.warnfon) referenced 4 times from lauxlib.o(.text.warnfon)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[269]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[91]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ac]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[26b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[26c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[26d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[26e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmb_fault_keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[268]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[26f]"></a>ungetc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fgetc_u.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[60]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[1b8]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[222]"></a>localeconv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, localeconv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[130]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>

<P><STRONG><a name="[156]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>

<P><STRONG><a name="[217]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[9c]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfon
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfoff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>

<P><STRONG><a name="[22c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[9b]"></a>strcoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[229]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[24a]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[1b7]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
</UL>

<P><STRONG><a name="[227]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[215]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1d4]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[1da]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[274]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[275]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[276]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[277]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__strtof_int</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, strtof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[278]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[a2]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[25a]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>

<P><STRONG><a name="[27b]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_frem</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, frem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27c]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[92]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[27d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[a6]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a5]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[b1]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[5e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_DMA_Abort</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[bd]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
</UL>

<P><STRONG><a name="[e7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_led_on
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_led_off
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[f6]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[be]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_InitTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[e3]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[dc]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 578 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_UART_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[f8]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[e9]"></a>LUA_Test</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lua_demo.o(.text.LUA_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = LUA_Test &rArr; luaL_loadstring &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>MX_DMA_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>MX_GPIO_Init</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>MX_TIM11_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tim.o(.text.MX_TIM11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM11_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>SystemClock_Config</STRONG> (Thumb, 166 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[248]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 418 bytes, Stack size 28 bytes, cm_backtrace.o(.text.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cm_backtrace_call_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[93]"></a>cm_backtrace_fault</STRONG> (Thumb, 1576 bytes, Stack size 48 bytes, cm_backtrace.o(.text.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[12f]"></a>cm_backtrace_init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, cm_backtrace.o(.text.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cm_backtrace_init &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>luaC_barrier_</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lgc.o(.text.luaC_barrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[110]"></a>luaC_barrierback_</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lgc.o(.text.luaC_barrierback_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1bd]"></a>luaC_changemode</STRONG> (Thumb, 678 bytes, Stack size 32 bytes, lgc.o(.text.luaC_changemode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = luaC_changemode &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>

<P><STRONG><a name="[1be]"></a>luaC_checkfinalizer</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, lgc.o(.text.luaC_checkfinalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaC_checkfinalizer &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>

<P><STRONG><a name="[22d]"></a>luaC_fix</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lgc.o(.text.luaC_fix))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
</UL>

<P><STRONG><a name="[128]"></a>luaC_freeallobjects</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, lgc.o(.text.luaC_freeallobjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaC_freeallobjects &rArr; GCTM &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[1c0]"></a>luaC_fullgc</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, lgc.o(.text.luaC_fullgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = luaC_fullgc &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_shrinkvector_
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>

<P><STRONG><a name="[1c2]"></a>luaC_newobj</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(.text.luaC_newobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
</UL>

<P><STRONG><a name="[125]"></a>luaC_step</STRONG> (Thumb, 1916 bytes, Stack size 48 bytes, lgc.o(.text.luaC_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = luaC_step &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
</UL>

<P><STRONG><a name="[1c3]"></a>luaD_call</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ldo.o(.text.luaD_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + In Cycle
<LI>Call Chain = luaD_call &rArr;  luaV_execute (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[14c]"></a>luaD_callnoyield</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ldo.o(.text.luaD_callnoyield))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dothecall
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[127]"></a>luaD_closeprotected</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ldo.o(.text.luaD_closeprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = luaD_closeprotected &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
</UL>

<P><STRONG><a name="[1c8]"></a>luaD_growstack</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ldo.o(.text.luaD_growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_adjustvarargs
</UL>

<P><STRONG><a name="[1cb]"></a>luaD_hook</STRONG> (Thumb, 260 bytes, Stack size 144 bytes, ldo.o(.text.luaD_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + In Cycle
<LI>Call Chain = luaD_hook &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hookcall
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rethook
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
</UL>

<P><STRONG><a name="[1cc]"></a>luaD_hookcall</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ldo.o(.text.luaD_hookcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = luaD_hookcall &rArr; luaD_hook &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[19c]"></a>luaD_inctop</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, ldo.o(.text.luaD_inctop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaD_inctop &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
</UL>

<P><STRONG><a name="[b6]"></a>luaD_pcall</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, ldo.o(.text.luaD_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[1ce]"></a>luaD_poscall</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, ldo.o(.text.luaD_poscall))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = luaD_poscall &rArr; rethook &rArr; luaD_hook &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rethook
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[1c4]"></a>luaD_precall</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, ldo.o(.text.luaD_precall))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + In Cycle
<LI>Call Chain = luaD_precall &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1d2]"></a>luaD_pretailcall</STRONG> (Thumb, 1102 bytes, Stack size 48 bytes, ldo.o(.text.luaD_pretailcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + In Cycle
<LI>Call Chain = luaD_pretailcall &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1d3]"></a>luaD_protectedparser</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, ldo.o(.text.luaD_protectedparser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[1c7]"></a>luaD_rawrunprotected</STRONG> (Thumb, 50 bytes, Stack size 200 bytes, ldo.o(.text.luaD_rawrunprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_closeprotected
</UL>

<P><STRONG><a name="[1c9]"></a>luaD_reallocstack</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, ldo.o(.text.luaD_reallocstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = luaD_reallocstack &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>

<P><STRONG><a name="[1d7]"></a>luaD_seterrorobj</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ldo.o(.text.luaD_seterrorobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaD_seterrorobj &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
</UL>

<P><STRONG><a name="[1d8]"></a>luaD_shrinkstack</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ldo.o(.text.luaD_shrinkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = luaD_shrinkstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[14e]"></a>luaD_throw</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ldo.o(.text.luaD_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_resetthread
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_shrinkvector_
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1d0]"></a>luaD_tryfuncTM</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, ldo.o(.text.luaD_tryfuncTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = luaD_tryfuncTM &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[1c6]"></a>luaE_checkcstack</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lstate.o(.text.luaE_checkcstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + In Cycle
<LI>Call Chain = luaE_checkcstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[1d1]"></a>luaE_extendCI</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lstate.o(.text.luaE_extendCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaE_extendCI &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[16e]"></a>luaE_freethread</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lstate.o(.text.luaE_freethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[1dd]"></a>luaE_incCstack</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lstate.o(.text.luaE_incCstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaE_incCstack &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[1d9]"></a>luaE_resetthread</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lstate.o(.text.luaE_resetthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = luaE_resetthread &rArr; luaD_reallocstack &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_closeprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[1c1]"></a>luaE_setdebt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lstate.o(.text.luaE_setdebt))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[1cd]"></a>luaE_shrinkCI</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lstate.o(.text.luaE_shrinkCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaE_shrinkCI &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[b7]"></a>luaE_warnerror</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lstate.o(.text.luaE_warnerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaE_warnerror
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>

<P><STRONG><a name="[244]"></a>luaE_warning</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lstate.o(.text.luaE_warning))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_warning
</UL>

<P><STRONG><a name="[12a]"></a>luaF_close</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, lfunc.o(.text.luaF_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = luaF_close &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closepaux
</UL>

<P><STRONG><a name="[1dc]"></a>luaF_closeupval</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lfunc.o(.text.luaF_closeupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1de]"></a>luaF_findupval</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lfunc.o(.text.luaF_findupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaF_findupval &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[170]"></a>luaF_freeproto</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lfunc.o(.text.luaF_freeproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaF_freeproto &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[17f]"></a>luaF_getlocalname</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lfunc.o(.text.luaF_getlocalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_findlocal
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[159]"></a>luaF_initupvals</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lfunc.o(.text.luaF_initupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaF_initupvals &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[1df]"></a>luaF_newCclosure</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfunc.o(.text.luaF_newCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[1e0]"></a>luaF_newLclosure</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lfunc.o(.text.luaF_newLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaF_newLclosure &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[113]"></a>luaF_newproto</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lfunc.o(.text.luaF_newproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = luaF_newproto &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[1e2]"></a>luaF_newtbcupval</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, lfunc.o(.text.luaF_newtbcupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = luaF_newtbcupval &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_findlocal
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[16f]"></a>luaF_unlinkupval</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lfunc.o(.text.luaF_unlinkupval))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[18f]"></a>luaG_addinfo</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, ldebug.o(.text.luaG_addinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = luaG_addinfo &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[1db]"></a>luaG_callerror</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ldebug.o(.text.luaG_callerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = luaG_callerror &rArr; varinfo &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcall
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
</UL>

<P><STRONG><a name="[1e7]"></a>luaG_concaterror</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ldebug.o(.text.luaG_concaterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaG_concaterror &rArr; luaG_typeerror &rArr; varinfo &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
</UL>

<P><STRONG><a name="[1e9]"></a>luaG_errormsg</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ldebug.o(.text.luaG_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = luaG_errormsg &rArr; luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[1e3]"></a>luaG_findlocal</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ldebug.o(.text.luaG_findlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaG_findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newtbcupval
</UL>

<P><STRONG><a name="[1ea]"></a>luaG_forerror</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ldebug.o(.text.luaG_forerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = luaG_forerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1ec]"></a>luaG_opinterror</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ldebug.o(.text.luaG_opinterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaG_opinterror &rArr; luaG_typeerror &rArr; varinfo &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[1ed]"></a>luaG_ordererror</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ldebug.o(.text.luaG_ordererror))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = luaG_ordererror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[1ca]"></a>luaG_runerror</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, ldebug.o(.text.luaG_runerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newtbcupval
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_idiv
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_checkcstack
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_forerror
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>

<P><STRONG><a name="[1ef]"></a>luaG_tointerror</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ldebug.o(.text.luaG_tointerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[1f0]"></a>luaG_traceexec</STRONG> (Thumb, 1240 bytes, Stack size 56 bytes, ldebug.o(.text.luaG_traceexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = luaG_traceexec &rArr; luaD_hook &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1e8]"></a>luaG_typeerror</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ldebug.o(.text.luaG_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = luaG_typeerror &rArr; varinfo &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
</UL>

<P><STRONG><a name="[fc]"></a>luaH_finishset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ltable.o(.text.luaH_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = luaH_finishset &rArr; luaH_newkey &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
</UL>

<P><STRONG><a name="[16d]"></a>luaH_free</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ltable.o(.text.luaH_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaH_free &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[fb]"></a>luaH_get</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ltable.o(.text.luaH_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = luaH_get &rArr; getgeneric &rArr; mainpositionTV &rArr; luaS_hashlongstr
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1f2]"></a>luaH_getint</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, ltable.o(.text.luaH_getint))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1f3]"></a>luaH_getn</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, ltable.o(.text.luaH_getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaH_getn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
</UL>

<P><STRONG><a name="[232]"></a>luaH_getshortstr</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ltable.o(.text.luaH_getshortstr))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[10f]"></a>luaH_getstr</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ltable.o(.text.luaH_getstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = luaH_getstr &rArr; getgeneric &rArr; mainpositionTV &rArr; luaS_hashlongstr
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[150]"></a>luaH_new</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ltable.o(.text.luaH_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = luaH_new &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1f1]"></a>luaH_newkey</STRONG> (Thumb, 1312 bytes, Stack size 192 bytes, ltable.o(.text.luaH_newkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + In Cycle
<LI>Call Chain = luaH_newkey &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[1f5]"></a>luaH_next</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, ltable.o(.text.luaH_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = luaH_next &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[120]"></a>luaH_realasize</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ltable.o(.text.luaH_realasize))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[151]"></a>luaH_resize</STRONG> (Thumb, 756 bytes, Stack size 96 bytes, ltable.o(.text.luaH_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = luaH_resize &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1f6]"></a>luaH_resizearray</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ltable.o(.text.luaH_resizearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = luaH_resizearray &rArr; luaH_resize &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1f7]"></a>luaH_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ltable.o(.text.luaH_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = luaH_set &rArr; luaH_newkey &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>

<P><STRONG><a name="[1f8]"></a>luaH_setint</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ltable.o(.text.luaH_setint))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = luaH_setint &rArr; luaH_newkey &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[1f9]"></a>luaK_checkstack</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcode.o(.text.luaK_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[13e]"></a>luaK_code</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lcode.o(.text.luaK_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_code &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[116]"></a>luaK_codeABCk</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lcode.o(.text.luaK_codeABCk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_codeABCk &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[119]"></a>luaK_codeABx</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcode.o(.text.luaK_codeABx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_codeABx &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[1fa]"></a>luaK_concat</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lcode.o(.text.luaK_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaK_concat &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[132]"></a>luaK_dischargevars</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, lcode.o(.text.luaK_dischargevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = luaK_dischargevars &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[1fc]"></a>luaK_exp2RK</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcode.o(.text.luaK_exp2RK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaK_exp2RK &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
</UL>

<P><STRONG><a name="[1fd]"></a>luaK_exp2anyreg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcode.o(.text.luaK_exp2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[1fe]"></a>luaK_exp2anyregup</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcode.o(.text.luaK_exp2anyregup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaK_exp2anyregup &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[251]"></a>luaK_exp2const</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lcode.o(.text.luaK_exp2const))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaK_exp2const
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[102]"></a>luaK_exp2nextreg</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lcode.o(.text.luaK_exp2nextreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[1ff]"></a>luaK_exp2val</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lcode.o(.text.luaK_exp2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[123]"></a>luaK_finish</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, lcode.o(.text.luaK_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaK_finish &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[169]"></a>luaK_fixline</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcode.o(.text.luaK_fixline))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = luaK_fixline &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[145]"></a>luaK_getlabel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcode.o(.text.luaK_getlabel))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>

<P><STRONG><a name="[200]"></a>luaK_goiffalse</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lcode.o(.text.luaK_goiffalse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaK_goiffalse &rArr; jumponcond &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[201]"></a>luaK_goiftrue</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, lcode.o(.text.luaK_goiftrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[202]"></a>luaK_indexed</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, lcode.o(.text.luaK_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaK_indexed &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[203]"></a>luaK_infix</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, lcode.o(.text.luaK_infix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaK_infix &rArr; luaK_exp2RK &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[14a]"></a>luaK_int</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, lcode.o(.text.luaK_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[204]"></a>luaK_jump</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcode.o(.text.luaK_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_jump &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[103]"></a>luaK_nil</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, lcode.o(.text.luaK_nil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_nil &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[146]"></a>luaK_patchlist</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lcode.o(.text.luaK_patchlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaK_patchlist &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>

<P><STRONG><a name="[205]"></a>luaK_patchtohere</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcode.o(.text.luaK_patchtohere))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaK_patchtohere &rArr; luaK_patchlist &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[206]"></a>luaK_posfix</STRONG> (Thumb, 1956 bytes, Stack size 160 bytes, lcode.o(.text.luaK_posfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = luaK_posfix &rArr; codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[207]"></a>luaK_prefix</STRONG> (Thumb, 794 bytes, Stack size 48 bytes, lcode.o(.text.luaK_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaK_prefix &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[104]"></a>luaK_reserveregs</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcode.o(.text.luaK_reserveregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaK_reserveregs &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[121]"></a>luaK_ret</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lcode.o(.text.luaK_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = luaK_ret &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[208]"></a>luaK_self</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, lcode.o(.text.luaK_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaK_self &rArr; luaK_exp2RK &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[18a]"></a>luaK_semerror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcode.o(.text.luaK_semerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpscopeerror
</UL>

<P><STRONG><a name="[13f]"></a>luaK_setlist</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lcode.o(.text.luaK_setlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = luaK_setlist &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[24d]"></a>luaK_setoneret</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lcode.o(.text.luaK_setoneret))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[101]"></a>luaK_setreturns</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lcode.o(.text.luaK_setreturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaK_setreturns &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[143]"></a>luaK_settablesize</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lcode.o(.text.luaK_settablesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaK_settablesize
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[209]"></a>luaK_storevar</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, lcode.o(.text.luaK_storevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaK_storevar &rArr; luaK_exp2RK &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[1b5]"></a>luaL_argerror</STRONG> (Thumb, 124 bytes, Stack size 128 bytes, lauxlib.o(.text.luaL_argerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>

<P><STRONG><a name="[20d]"></a>luaL_callmeta</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_callmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = luaL_callmeta &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[19e]"></a>luaL_checkany</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(.text.luaL_checkany))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>

<P><STRONG><a name="[186]"></a>luaL_checkinteger</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_checkinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaL_checkinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
</UL>

<P><STRONG><a name="[1bb]"></a>luaL_checklstring</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lauxlib.o(.text.luaL_checklstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaL_checklstring &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
</UL>

<P><STRONG><a name="[1a0]"></a>luaL_checkoption</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaL_checkoption &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[176]"></a>luaL_checkstack</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lauxlib.o(.text.luaL_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
</UL>

<P><STRONG><a name="[1ac]"></a>luaL_checktype</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lauxlib.o(.text.luaL_checktype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaL_checktype &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[17a]"></a>luaL_error</STRONG> (Thumb, 122 bytes, Stack size 136 bytes, lauxlib.o(.text.luaL_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[1a9]"></a>luaL_getmetafield</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lauxlib.o(.text.luaL_getmetafield))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = luaL_getmetafield &rArr; lua_pushstring &rArr; luaC_step &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
</UL>

<P><STRONG><a name="[1ab]"></a>luaL_loadbufferx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_loadbufferx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[1a5]"></a>luaL_loadfilex</STRONG> (Thumb, 436 bytes, Stack size 560 bytes, lauxlib.o(.text.luaL_loadfilex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>

<P><STRONG><a name="[ed]"></a>luaL_loadstring</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lauxlib.o(.text.luaL_loadstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = luaL_loadstring &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUA_Test
</UL>

<P><STRONG><a name="[ea]"></a>luaL_newstate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lauxlib.o(.text.luaL_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = luaL_newstate &rArr; lua_newstate &rArr; close_state &rArr; luaC_freeallobjects &rArr; GCTM &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setwarnf
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_atpanic
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUA_Test
</UL>

<P><STRONG><a name="[1a1]"></a>luaL_optinteger</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_optinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaL_optinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[1a4]"></a>luaL_optlstring</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_optlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaL_optlstring &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
</UL>

<P><STRONG><a name="[ec]"></a>luaL_setfuncs</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lauxlib.o(.text.luaL_setfuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = luaL_setfuncs &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUA_Test
</UL>

<P><STRONG><a name="[1af]"></a>luaL_tolstring</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaL_tolstring &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[1b3]"></a>luaL_typeerror</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lauxlib.o(.text.luaL_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[1a7]"></a>luaL_where</STRONG> (Thumb, 78 bytes, Stack size 128 bytes, lauxlib.o(.text.luaL_where))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
</UL>

<P><STRONG><a name="[129]"></a>luaM_free_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lmem.o(.text.luaM_free_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freehash
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[fd]"></a>luaM_growaux_</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lmem.o(.text.luaM_growaux_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[14f]"></a>luaM_malloc_</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lmem.o(.text.luaM_malloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[1d5]"></a>luaM_realloc_</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lmem.o(.text.luaM_realloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = luaM_realloc_ &rArr; luaC_fullgc &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>

<P><STRONG><a name="[190]"></a>luaM_saferealloc_</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lmem.o(.text.luaM_saferealloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = luaM_saferealloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[124]"></a>luaM_shrinkvector_</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lmem.o(.text.luaM_shrinkvector_))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaM_shrinkvector_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[19a]"></a>luaM_toobig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmem.o(.text.luaM_toobig))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[1f4]"></a>luaO_ceillog2</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lobject.o(.text.luaO_ceillog2))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_settablesize
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[1e4]"></a>luaO_chunkid</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, lobject.o(.text.luaO_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
</UL>

<P><STRONG><a name="[194]"></a>luaO_hexavalue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lobject.o(.text.luaO_hexavalue))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[11f]"></a>luaO_pushfstring</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lobject.o(.text.luaO_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpscopeerror
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1ee]"></a>luaO_pushvfstring</STRONG> (Thumb, 1728 bytes, Stack size 280 bytes, lobject.o(.text.luaO_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + In Cycle
<LI>Call Chain = luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>

<P><STRONG><a name="[13c]"></a>luaO_rawarith</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, lobject.o(.text.luaO_rawarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = luaO_rawarith &rArr; intarith &rArr; luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[226]"></a>luaO_str2num</STRONG> (Thumb, 720 bytes, Stack size 248 bytes, lobject.o(.text.luaO_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[22a]"></a>luaO_tostring</STRONG> (Thumb, 42 bytes, Stack size 64 bytes, lobject.o(.text.luaO_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = luaO_tostring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[195]"></a>luaO_utf8esc</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lobject.o(.text.luaO_utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[10c]"></a>luaS_clearcache</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, lstring.o(.text.luaS_clearcache))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[19b]"></a>luaS_createlngstrobj</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lstring.o(.text.luaS_createlngstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = luaS_createlngstrobj &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
</UL>

<P><STRONG><a name="[17e]"></a>luaS_eqlngstr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lstring.o(.text.luaS_eqlngstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>

<P><STRONG><a name="[242]"></a>luaS_hash</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lstring.o(.text.luaS_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[246]"></a>luaS_hashlongstr</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, lstring.o(.text.luaS_hashlongstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaS_hashlongstr
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
</UL>

<P><STRONG><a name="[152]"></a>luaS_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lstring.o(.text.luaS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = luaS_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[10e]"></a>luaS_new</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lstring.o(.text.luaS_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
</UL>

<P><STRONG><a name="[18d]"></a>luaS_newlstr</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, lstring.o(.text.luaS_newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_seterrorobj
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
</UL>

<P><STRONG><a name="[16c]"></a>luaS_remove</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lstring.o(.text.luaS_remove))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[165]"></a>luaS_resize</STRONG> (Thumb, 1124 bytes, Stack size 40 bytes, lstring.o(.text.luaS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaS_resize &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[22e]"></a>luaT_adjustvarargs</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, ltm.o(.text.luaT_adjustvarargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = luaT_adjustvarargs &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[22f]"></a>luaT_callTM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ltm.o(.text.luaT_callTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + In Cycle
<LI>Call Chain = luaT_callTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
</UL>

<P><STRONG><a name="[230]"></a>luaT_callTMres</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ltm.o(.text.luaT_callTMres))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + In Cycle
<LI>Call Chain = luaT_callTMres &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>

<P><STRONG><a name="[231]"></a>luaT_callorderTM</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ltm.o(.text.luaT_callorderTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + In Cycle
<LI>Call Chain = luaT_callorderTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderiTM
</UL>

<P><STRONG><a name="[233]"></a>luaT_callorderiTM</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ltm.o(.text.luaT_callorderiTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = luaT_callorderiTM &rArr; luaT_callorderTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1bf]"></a>luaT_gettm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltm.o(.text.luaT_gettm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaT_gettm
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[b5]"></a>luaT_gettmbyobj</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ltm.o(.text.luaT_gettmbyobj))
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newtbcupval
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_tryfuncTM
</UL>

<P><STRONG><a name="[234]"></a>luaT_getvarargs</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, ltm.o(.text.luaT_getvarargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = luaT_getvarargs &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[153]"></a>luaT_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ltm.o(.text.luaT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaT_init &rArr; luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[1eb]"></a>luaT_objtypename</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ltm.o(.text.luaT_objtypename))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = luaT_objtypename &rArr; luaS_new &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_forerror
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>

<P><STRONG><a name="[235]"></a>luaT_trybinTM</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, ltm.o(.text.luaT_trybinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + In Cycle
<LI>Call Chain = luaT_trybinTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybiniTM
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
</UL>

<P><STRONG><a name="[236]"></a>luaT_trybinassocTM</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ltm.o(.text.luaT_trybinassocTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = luaT_trybinassocTM &rArr; luaT_trybinTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[237]"></a>luaT_trybiniTM</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ltm.o(.text.luaT_trybiniTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaT_trybiniTM &rArr; luaT_trybinTM &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[238]"></a>luaT_tryconcatTM</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, ltm.o(.text.luaT_tryconcatTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = luaT_tryconcatTM &rArr; luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[157]"></a>luaU_undump</STRONG> (Thumb, 728 bytes, Stack size 40 bytes, lundump.o(.text.luaU_undump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaU_undump &rArr; loadFunction &rArr;  loadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[220]"></a>luaV_concat</STRONG> (Thumb, 432 bytes, Stack size 80 bytes, lvm.o(.text.luaV_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_tryconcatTM
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[ff]"></a>luaV_equalobj</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, lvm.o(.text.luaV_equalobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaV_equalobj &rArr; luaT_callTMres &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[1c5]"></a>luaV_execute</STRONG> (Thumb, 15008 bytes, Stack size 152 bytes, lvm.o(.text.luaV_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newtbcupval
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_closeupval
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pretailcall
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hookcall
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_forerror
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybiniTM
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinassocTM
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_getvarargs
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderiTM
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_adjustvarargs
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[239]"></a>luaV_finishget</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lvm.o(.text.luaV_finishget))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + In Cycle
<LI>Call Chain = luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[111]"></a>luaV_finishset</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, lvm.o(.text.luaV_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + In Cycle
<LI>Call Chain = luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[137]"></a>luaV_flttointeger</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lvm.o(.text.luaV_flttointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaV_flttointeger
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[184]"></a>luaV_idiv</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lvm.o(.text.luaV_idiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaV_idiv &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[183]"></a>luaV_mod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lvm.o(.text.luaV_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[224]"></a>luaV_modf</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lvm.o(.text.luaV_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = luaV_modf &rArr; __hardfp_fmodf &rArr; _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
</UL>

<P><STRONG><a name="[23b]"></a>luaV_objlen</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lvm.o(.text.luaV_objlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = luaV_objlen &rArr; luaT_callTMres &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTMres
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[185]"></a>luaV_shiftl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lvm.o(.text.luaV_shiftl))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[23c]"></a>luaV_tointeger</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, lvm.o(.text.luaV_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = luaV_tointeger &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
</UL>

<P><STRONG><a name="[13b]"></a>luaV_tointegerns</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lvm.o(.text.luaV_tointegerns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaV_tointegerns
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
</UL>

<P><STRONG><a name="[23d]"></a>luaV_tonumber_</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lvm.o(.text.luaV_tonumber_))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = luaV_tonumber_ &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>

<P><STRONG><a name="[154]"></a>luaX_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, llex.o(.text.luaX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = luaX_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[140]"></a>luaX_lookahead</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llex.o(.text.luaX_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[115]"></a>luaX_newstring</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, llex.o(.text.luaX_newstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[114]"></a>luaX_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, llex.o(.text.luaX_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[23e]"></a>luaX_setinput</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, llex.o(.text.luaX_setinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = luaX_setinput &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[11c]"></a>luaX_syntaxerror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llex.o(.text.luaX_syntaxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[11e]"></a>luaX_token2str</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, llex.o(.text.luaX_token2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr;  luaO_pushvfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[133]"></a>luaY_nvarstack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lparser.o(.text.luaY_nvarstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaY_nvarstack
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[158]"></a>luaY_parser</STRONG> (Thumb, 624 bytes, Stack size 184 bytes, lparser.o(.text.luaY_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = luaY_parser &rArr; statement &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[155]"></a>luaZ_fill</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lzio.o(.text.luaZ_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[240]"></a>luaZ_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lzio.o(.text.luaZ_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[199]"></a>luaZ_read</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lzio.o(.text.luaZ_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaZ_read
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[20e]"></a>lua_absindex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lapi.o(.text.lua_absindex))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[218]"></a>lua_atpanic</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lapi.o(.text.lua_atpanic))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[177]"></a>lua_callk</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lapi.o(.text.lua_callk))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lua_callk &rArr; luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[212]"></a>lua_checkstack</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lapi.o(.text.lua_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lua_checkstack &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
</UL>

<P><STRONG><a name="[ef]"></a>lua_close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lstate.o(.text.lua_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = lua_close &rArr; close_state &rArr; luaC_freeallobjects &rArr; GCTM &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUA_Test
</UL>

<P><STRONG><a name="[162]"></a>lua_concat</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lapi.o(.text.lua_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[161]"></a>lua_copy</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, lapi.o(.text.lua_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lua_copy &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[1a6]"></a>lua_error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lapi.o(.text.lua_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lua_error &rArr; luaG_errormsg &rArr; luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[1a2]"></a>lua_gc</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, lapi.o(.text.lua_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lua_gc &rArr; luaC_step &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[23f]"></a>lua_getfield</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lapi.o(.text.lua_getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lua_getfield &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[188]"></a>lua_geti</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lapi.o(.text.lua_geti))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lua_geti &rArr; luaV_finishget &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
</UL>

<P><STRONG><a name="[20b]"></a>lua_getinfo</STRONG> (Thumb, 1572 bytes, Stack size 80 bytes, ldebug.o(.text.lua_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lua_getinfo &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcall
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[1a8]"></a>lua_getmetatable</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, lapi.o(.text.lua_getmetatable))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[20a]"></a>lua_getstack</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, ldebug.o(.text.lua_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[14b]"></a>lua_gettop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(.text.lua_gettop))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[21b]"></a>lua_isinteger</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, lapi.o(.text.lua_isinteger))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[210]"></a>lua_isnumber</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lapi.o(.text.lua_isnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[178]"></a>lua_isstring</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, lapi.o(.text.lua_isstring))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[1ad]"></a>lua_load</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lapi.o(.text.lua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
</UL>

<P><STRONG><a name="[70]"></a>lua_newstate</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, lstate.o(.text.lua_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = lua_newstate &rArr; close_state &rArr; luaC_freeallobjects &rArr; GCTM &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(.text.lua_newstate)
</UL>
<P><STRONG><a name="[15d]"></a>lua_next</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lapi.o(.text.lua_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = lua_next &rArr; luaH_next &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[ee]"></a>lua_pcallk</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lapi.o(.text.lua_pcallk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = lua_pcallk &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUA_Test
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>

<P><STRONG><a name="[166]"></a>lua_pushboolean</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lapi.o(.text.lua_pushboolean))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
</UL>

<P><STRONG><a name="[1aa]"></a>lua_pushcclosure</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, lapi.o(.text.lua_pushcclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lua_pushcclosure &rArr; luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_malloc_ &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
</UL>

<P><STRONG><a name="[211]"></a>lua_pushfstring</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lapi.o(.text.lua_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>

<P><STRONG><a name="[187]"></a>lua_pushinteger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lapi.o(.text.lua_pushinteger))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
</UL>

<P><STRONG><a name="[15c]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(.text.lua_pushnil))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[1a3]"></a>lua_pushnumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lapi.o(.text.lua_pushnumber))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[160]"></a>lua_pushstring</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lapi.o(.text.lua_pushstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lua_pushstring &rArr; luaC_step &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[167]"></a>lua_pushvalue</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lapi.o(.text.lua_pushvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[213]"></a>lua_pushvfstring</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lapi.o(.text.lua_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[15f]"></a>lua_rawequal</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, lapi.o(.text.lua_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lua_rawequal &rArr; luaV_equalobj &rArr; luaT_callTMres &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[1b1]"></a>lua_rawget</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lapi.o(.text.lua_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; mainpositionTV &rArr; luaS_hashlongstr
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[243]"></a>lua_rawgeti</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lapi.o(.text.lua_rawgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_rawgeti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
</UL>

<P><STRONG><a name="[1b2]"></a>lua_rawlen</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, lapi.o(.text.lua_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lua_rawlen &rArr; luaH_getn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
</UL>

<P><STRONG><a name="[1b4]"></a>lua_rawset</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lapi.o(.text.lua_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lua_rawset &rArr; luaH_set &rArr; luaH_newkey &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
</UL>

<P><STRONG><a name="[19f]"></a>lua_rotate</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lapi.o(.text.lua_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[21a]"></a>lua_setfield</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lapi.o(.text.lua_setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
</UL>

<P><STRONG><a name="[1b6]"></a>lua_setmetatable</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, lapi.o(.text.lua_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lua_setmetatable &rArr; luaC_checkfinalizer &rArr; freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
</UL>

<P><STRONG><a name="[15e]"></a>lua_settop</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, lapi.o(.text.lua_settop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lua_settop &rArr; luaF_close &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[1ae]"></a>lua_setupvalue</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, lapi.o(.text.lua_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lua_setupvalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[219]"></a>lua_setwarnf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lapi.o(.text.lua_setwarnf))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfon
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfoff
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfcont
</UL>

<P><STRONG><a name="[1b9]"></a>lua_stringtonumber</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lapi.o(.text.lua_stringtonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lua_stringtonumber &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[19d]"></a>lua_toboolean</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, lapi.o(.text.lua_toboolean))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[20f]"></a>lua_tointegerx</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lapi.o(.text.lua_tointegerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lua_tointegerx &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_delay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[179]"></a>lua_tolstring</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, lapi.o(.text.lua_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lua_tolstring &rArr; luaC_step &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>

<P><STRONG><a name="[21c]"></a>lua_tonumberx</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lapi.o(.text.lua_tonumberx))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[21e]"></a>lua_topointer</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lapi.o(.text.lua_topointer))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[15b]"></a>lua_type</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, lapi.o(.text.lua_type))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[1ba]"></a>lua_typename</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(.text.lua_typename))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[1bc]"></a>lua_warning</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lapi.o(.text.lua_warning))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_warn
</UL>

<P><STRONG><a name="[eb]"></a>luaopen_base</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lbaselib.o(.text.luaopen_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaopen_base &rArr; luaL_setfuncs &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUA_Test
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = main &rArr; LUA_Test &rArr; luaL_loadstring &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM11_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUA_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[241]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lua_demo.o(.text.time))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[253]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27f]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[247]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>

<P><STRONG><a name="[280]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[281]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[255]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[282]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[12b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
</UL>

<P><STRONG><a name="[283]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[284]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[256]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[285]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[221]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tostringbuff
</UL>

<P><STRONG><a name="[286]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[287]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[257]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[288]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[249]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[289]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[28a]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[25e]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[28b]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[18c]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[225]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[23a]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_modf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[245]"></a>__hardfp_frexpf</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, frexpf.o(i.__hardfp_frexpf))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
</UL>

<P><STRONG><a name="[149]"></a>__hardfp_ldexpf</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ldexpf.o(i.__hardfp_ldexpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_ldexpf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[223]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[28c]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[228]"></a>__hardfp_strtof</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[261]"></a>__malloc$realloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[260]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[25f]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[259]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[25c]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>

<P><STRONG><a name="[25b]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>

<P><STRONG><a name="[28d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[28f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[258]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[b2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[75]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfon
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfcont
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[252]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfon
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfcont
</UL>

<P><STRONG><a name="[17b]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fread
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[1b0]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fwrite &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warnfon
</UL>

<P><STRONG><a name="[24f]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
</UL>

<P><STRONG><a name="[12c]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
</UL>

<P><STRONG><a name="[18b]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>lua_delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lua_demo.o(.text.lua_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lua_delay &rArr; lua_tointegerx &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lua_demo.o(.data.mylib)
</UL>
<P><STRONG><a name="[90]"></a>lua_led_off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lua_demo.o(.text.lua_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lua_demo.o(.data.mylib)
</UL>
<P><STRONG><a name="[8f]"></a>lua_led_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lua_demo.o(.text.lua_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lua_demo.o(.data.mylib)
</UL>
<P><STRONG><a name="[bc]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[bb]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[c7]"></a>NVIC_EncodePriority</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d0]"></a>SysTick_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[c5]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[c6]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c8]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c9]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[62]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[e1]"></a>UART_EndRxTransfer</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[de]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>UART_Receive_IT</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>UART_SetConfig</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e0]"></a>UART_Transmit_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>dump_stack</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, cm_backtrace.o(.text.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dump_stack &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[12e]"></a>print_call_stack</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, cm_backtrace.o(.text.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = print_call_stack &rArr; cm_backtrace_call_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[10d]"></a>auxsetstr</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lapi.o(.text.auxsetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = auxsetstr &rArr; luaV_finishset &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
</UL>

<P><STRONG><a name="[72]"></a>f_call</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lapi.o(.text.f_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = f_call &rArr; luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(.text.lua_pcallk)
</UL>
<P><STRONG><a name="[15a]"></a>findfield</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lauxlib.o(.text.findfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + In Cycle
<LI>Call Chain = findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[6c]"></a>getF</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lauxlib.o(.text.getF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getF &rArr; fread
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text.luaL_loadfilex)
</UL>
<P><STRONG><a name="[6b]"></a>getS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lauxlib.o(.text.getS))
<BR>[Address Reference Count : 2]<UL><LI> lauxlib.o(.text.luaL_loadbufferx)
<LI> lauxlib.o(.text.luaL_loadstring)
</UL>
<P><STRONG><a name="[6d]"></a>l_alloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lauxlib.o(.text.l_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l_alloc &rArr; realloc &rArr; __malloc$realloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text.luaL_newstate)
</UL>
<P><STRONG><a name="[6e]"></a>panic</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lauxlib.o(.text.panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = panic &rArr; lua_tolstring &rArr; luaC_step &rArr; fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(.text.luaL_newstate)
</UL>
<P><STRONG><a name="[20c]"></a>pushglobalfuncname</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lauxlib.o(.text.pushglobalfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[216]"></a>skipcomment</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lauxlib.o(.text.skipcomment))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skipcomment
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[73]"></a>warnfcont</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lauxlib.o(.text.warnfcont))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = warnfcont &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setwarnf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lauxlib.o(.text.warnfon)
<LI> lauxlib.o(.text.warnfcont)
</UL>
<P><STRONG><a name="[6f]"></a>warnfoff</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lauxlib.o(.text.warnfoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = warnfoff &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setwarnf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lauxlib.o(.text.luaL_newstate)
<LI> lauxlib.o(.text.warnfoff)
<LI> lauxlib.o(.text.warnfon)
</UL>
<P><STRONG><a name="[74]"></a>warnfon</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lauxlib.o(.text.warnfon))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = warnfon &rArr; fwrite &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setwarnf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lauxlib.o(.text.warnfoff)
<LI> lauxlib.o(.text.warnfon)
<LI> lauxlib.o(.text.warnfcont)
</UL>
<P><STRONG><a name="[63]"></a>dofilecont</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lbaselib.o(.text.dofilecont))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dofilecont
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text.luaB_dofile)
</UL>
<P><STRONG><a name="[68]"></a>finishpcall</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lbaselib.o(.text.finishpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finishpcall &rArr; lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(.text.luaB_pcall)
<LI> lbaselib.o(.text.luaB_xpcall)
</UL>
<P><STRONG><a name="[65]"></a>generic_reader</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lbaselib.o(.text.generic_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text.luaB_load)
</UL>
<P><STRONG><a name="[64]"></a>ipairsaux</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lbaselib.o(.text.ipairsaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text.luaB_ipairs)
</UL>
<P><STRONG><a name="[78]"></a>luaB_assert</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaB_assert &rArr; luaB_error &rArr; luaL_optinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[79]"></a>luaB_collectgarbage</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, lbaselib.o(.text.luaB_collectgarbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaB_collectgarbage &rArr; luaL_optinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[7a]"></a>luaB_dofile</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lbaselib.o(.text.luaB_dofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = luaB_dofile &rArr; luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[7b]"></a>luaB_error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lbaselib.o(.text.luaB_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[7c]"></a>luaB_getmetatable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[7d]"></a>luaB_ipairs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_ipairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaB_ipairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[7f]"></a>luaB_load</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lbaselib.o(.text.luaB_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[7e]"></a>luaB_loadfile</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lbaselib.o(.text.luaB_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = luaB_loadfile &rArr; luaL_loadfilex &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[67]"></a>luaB_next</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lbaselib.o(.text.luaB_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(.text.luaB_pairs)
<LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[80]"></a>luaB_pairs</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lbaselib.o(.text.luaB_pairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaB_pairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[81]"></a>luaB_pcall</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lbaselib.o(.text.luaB_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[82]"></a>luaB_print</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lbaselib.o(.text.luaB_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = luaB_print &rArr; luaL_tolstring &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[84]"></a>luaB_rawequal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[86]"></a>luaB_rawget</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[85]"></a>luaB_rawlen</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaB_rawlen &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[87]"></a>luaB_rawset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[88]"></a>luaB_select</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lbaselib.o(.text.luaB_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[89]"></a>luaB_setmetatable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lbaselib.o(.text.luaB_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_typeerror
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[8a]"></a>luaB_tonumber</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, lbaselib.o(.text.luaB_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaB_tonumber &rArr; luaL_checkinteger &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[8b]"></a>luaB_tostring</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lbaselib.o(.text.luaB_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[8c]"></a>luaB_type</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lbaselib.o(.text.luaB_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaB_type &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[83]"></a>luaB_warn</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lbaselib.o(.text.luaB_warn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaB_warn &rArr; luaL_checklstring &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_warning
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[8d]"></a>luaB_xpcall</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lbaselib.o(.text.luaB_xpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaB_xpcall &rArr; luaL_checktype &rArr; luaL_typeerror &rArr; luaL_argerror &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.rodata.base_funcs)
</UL>
<P><STRONG><a name="[66]"></a>pairscont</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lbaselib.o(.text.pairscont))
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.text.luaB_pairs)
</UL>
<P><STRONG><a name="[fa]"></a>addk</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, lcode.o(.text.addk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_finishset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2K
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[131]"></a>codebinexpval</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, lcode.o(.text.codebinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = codebinexpval &rArr; finishbinexpval &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[136]"></a>codeorder</STRONG> (Thumb, 596 bytes, Stack size 56 bytes, lcode.o(.text.codeorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = codeorder &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[13a]"></a>constfolding</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, lcode.o(.text.constfolding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = constfolding &rArr; luaO_rawarith &rArr; intarith &rArr; luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointegerns
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[148]"></a>discharge2reg</STRONG> (Thumb, 790 bytes, Stack size 88 bytes, lcode.o(.text.discharge2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[135]"></a>exp2reg</STRONG> (Thumb, 1102 bytes, Stack size 64 bytes, lcode.o(.text.exp2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[134]"></a>finishbinexpval</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, lcode.o(.text.finishbinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = finishbinexpval &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[138]"></a>freeexps</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lcode.o(.text.freeexps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = freeexps &rArr; luaY_nvarstack
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
</UL>

<P><STRONG><a name="[189]"></a>jumponcond</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, lcode.o(.text.jumponcond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = jumponcond &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_nvarstack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savelineinfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
</UL>

<P><STRONG><a name="[1fb]"></a>luaK_exp2K</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, lcode.o(.text.luaK_exp2K))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaK_exp2K &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_flttointeger
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[139]"></a>savelineinfo</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, lcode.o(.text.savelineinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishbinexpval
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeorder
</UL>

<P><STRONG><a name="[174]"></a>funcnamefromcall</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ldebug.o(.text.funcnamefromcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = funcnamefromcall &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
</UL>

<P><STRONG><a name="[175]"></a>getobjname</STRONG> (Thumb, 1088 bytes, Stack size 48 bytes, ldebug.o(.text.getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcall
</UL>

<P><STRONG><a name="[1e6]"></a>typeerror</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ldebug.o(.text.typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = typeerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
</UL>

<P><STRONG><a name="[1e5]"></a>varinfo</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, ldebug.o(.text.varinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = varinfo &rArr; getobjname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_callerror
</UL>

<P><STRONG><a name="[69]"></a>closepaux</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ldo.o(.text.closepaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = closepaux &rArr; luaF_close &rArr;  luaD_callnoyield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ldo.o(.text.luaD_closeprotected)
<LI> ldo.o(.text.luaD_pcall)
</UL>
<P><STRONG><a name="[6a]"></a>f_parser</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ldo.o(.text.f_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = f_parser &rArr; luaY_parser &rArr; statement &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(.text.luaD_protectedparser)
</UL>
<P><STRONG><a name="[1cf]"></a>rethook</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ldo.o(.text.rethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = rethook &rArr; luaD_hook &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>

<P><STRONG><a name="[b4]"></a>GCTM</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lgc.o(.text.GCTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = GCTM &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_warnerror
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[106]"></a>atomic</STRONG> (Thumb, 880 bytes, Stack size 64 bytes, lgc.o(.text.atomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atomic &rArr; propagatemark &rArr; traverseephemeron &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_clearcache
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>

<P><STRONG><a name="[10b]"></a>clearbyvalues</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lgc.o(.text.clearbyvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clearbyvalues &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[164]"></a>correctgraylist</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, lgc.o(.text.correctgraylist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = correctgraylist
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
</UL>

<P><STRONG><a name="[61]"></a>dothecall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lgc.o(.text.dothecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = dothecall &rArr; luaD_callnoyield &rArr; luaV_execute &rArr;  luaV_concat (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lgc.o(.text.GCTM)
</UL>
<P><STRONG><a name="[163]"></a>finishgencycle</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lgc.o(.text.finishgencycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = finishgencycle &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctgraylist
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>

<P><STRONG><a name="[16b]"></a>freeobj</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lgc.o(.text.freeobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = freeobj &rArr; luaE_freethread &rArr; luaF_closeupval &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_unlinkupval
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>

<P><STRONG><a name="[171]"></a>fullgen</STRONG> (Thumb, 680 bytes, Stack size 48 bytes, lgc.o(.text.fullgen))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fullgen &rArr; singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishgencycle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[108]"></a>markmt</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, lgc.o(.text.markmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[109]"></a>propagatemark</STRONG> (Thumb, 1552 bytes, Stack size 40 bytes, lgc.o(.text.propagatemark))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = propagatemark &rArr; traverseephemeron &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[107]"></a>reallymarkobject</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lgc.o(.text.reallymarkobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearbyvalues
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[172]"></a>singlestep</STRONG> (Thumb, 878 bytes, Stack size 40 bytes, lgc.o(.text.singlestep))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + In Cycle
<LI>Call Chain = singlestep &rArr;  GCTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_changemode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullgen
</UL>

<P><STRONG><a name="[10a]"></a>traverseephemeron</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, lgc.o(.text.traverseephemeron))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = traverseephemeron &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_realasize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[180]"></a>inclinenumber</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, llex.o(.text.inclinenumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = inclinenumber &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[181]"></a>lexerror</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, llex.o(.text.lexerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + In Cycle
<LI>Call Chain = lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
</UL>

<P><STRONG><a name="[191]"></a>llex</STRONG> (Thumb, 4504 bytes, Stack size 56 bytes, llex.o(.text.llex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>

<P><STRONG><a name="[193]"></a>read_long_string</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, llex.o(.text.read_long_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[196]"></a>read_numeral</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, llex.o(.text.read_numeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = read_numeral &rArr; luaO_str2num &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[192]"></a>skip_sep</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, llex.o(.text.skip_sep))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = skip_sep &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_saferealloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[182]"></a>intarith</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lobject.o(.text.intarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = intarith &rArr; luaV_mod &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_rawarith
</UL>

<P><STRONG><a name="[22b]"></a>tostringbuff</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lobject.o(.text.tostringbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tostringbuff &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
</UL>

<P><STRONG><a name="[100]"></a>adjust_assign</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lparser.o(.text.adjust_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_int &rArr; addk &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[105]"></a>adjustlocalvars</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, lparser.o(.text.adjustlocalvars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = adjustlocalvars &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[112]"></a>body</STRONG> (Thumb, 904 bytes, Stack size 136 bytes, lparser.o(.text.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + In Cycle
<LI>Call Chain = body &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[118]"></a>check_match</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lparser.o(.text.check_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = check_match &rArr; luaX_next &rArr; llex &rArr; read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[11a]"></a>close_func</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, lparser.o(.text.close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = close_func &rArr; leaveblock &rArr; createlabel &rArr; luaK_codeABCk &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_finish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_shrinkvector_
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[13d]"></a>constructor</STRONG> (Thumb, 374 bytes, Stack size 80 bytes, lparser.o(.text.constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + In Cycle
<LI>Call Chain = constructor &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_settablesize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[144]"></a>createlabel</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, lparser.o(.text.createlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = createlabel &rArr; luaK_codeABCk &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpscopeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[11d]"></a>error_expected</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lparser.o(.text.error_expected))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[11b]"></a>errorlimit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lparser.o(.text.errorlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = errorlimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[168]"></a>forbody</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, lparser.o(.text.forbody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + In Cycle
<LI>Call Chain = forbody &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[173]"></a>funcargs</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, lparser.o(.text.funcargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + In Cycle
<LI>Call Chain = funcargs &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[147]"></a>jumpscopeerror</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lparser.o(.text.jumpscopeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = jumpscopeerror &rArr; luaK_semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  lexerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>

<P><STRONG><a name="[122]"></a>leaveblock</STRONG> (Thumb, 996 bytes, Stack size 56 bytes, lparser.o(.text.leaveblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = leaveblock &rArr; createlabel &rArr; luaK_codeABCk &rArr; savelineinfo &rArr; luaM_growaux_ &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[141]"></a>recfield</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, lparser.o(.text.recfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + In Cycle
<LI>Call Chain = recfield &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[24b]"></a>restassign</STRONG> (Thumb, 490 bytes, Stack size 56 bytes, lparser.o(.text.restassign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + In Cycle
<LI>Call Chain = restassign &rArr;  restassign (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[24e]"></a>singlevaraux</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, lparser.o(.text.singlevaraux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[117]"></a>statement</STRONG> (Thumb, 4888 bytes, Stack size 120 bytes, lparser.o(.text.statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272 + In Cycle
<LI>Call Chain = statement &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_int
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2const
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errorlimit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createlabel
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[142]"></a>subexpr</STRONG> (Thumb, 772 bytes, Stack size 64 bytes, lparser.o(.text.subexpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABCk
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_incCstack
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[24c]"></a>suffixedexp</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, lparser.o(.text.suffixedexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + In Cycle
<LI>Call Chain = suffixedexp &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restassign
</UL>

<P><STRONG><a name="[250]"></a>test_then_block</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, lparser.o(.text.test_then_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + In Cycle
<LI>Call Chain = test_then_block &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[18e]"></a>undefgoto</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lparser.o(.text.undefgoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = undefgoto &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_semerror
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[126]"></a>close_state</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lstate.o(.text.close_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = close_state &rArr; luaC_freeallobjects &rArr; GCTM &rArr; luaD_pcall &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_closeprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[71]"></a>f_luaopen</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, lstate.o(.text.f_luaopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = f_luaopen &rArr; luaX_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(.text.lua_newstate)
</UL>
<P><STRONG><a name="[16a]"></a>freehash</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ltable.o(.text.freehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freehash &rArr; luaM_free_
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>

<P><STRONG><a name="[17c]"></a>getgeneric</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ltable.o(.text.getgeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = getgeneric &rArr; mainpositionTV &rArr; luaS_hashlongstr
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainpositionTV
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>

<P><STRONG><a name="[17d]"></a>mainpositionTV</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, ltable.o(.text.mainpositionTV))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mainpositionTV &rArr; luaS_hashlongstr
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexpf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>

<P><STRONG><a name="[14d]"></a>error</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lundump.o(.text.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = error &rArr; luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[197]"></a>loadFunction</STRONG> (Thumb, 2084 bytes, Stack size 48 bytes, lundump.o(.text.loadFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + In Cycle
<LI>Call Chain = loadFunction &rArr;  loadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_malloc_
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadStringN
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[198]"></a>loadStringN</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, lundump.o(.text.loadStringN))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = loadStringN &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaO_pushvfstring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadFunction
</UL>

<P><STRONG><a name="[263]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[254]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[266]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[265]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[76]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[77]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[262]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__malloc$realloc
</UL>

<P><STRONG><a name="[ad]"></a>_local_sscanf</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[af]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
